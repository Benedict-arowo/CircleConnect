generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  canCreateCircle       Boolean @default(false)
  canModifyOwnCircle    Boolean @default(false)
  canModifyOtherCircle  Boolean @default(false)
  canDeleteOwnCircle    Boolean @default(false)
  canDeleteOtherCircles Boolean @default(false)
  canLeaveCircle        Boolean @default(false)
  canJoinCircle         Boolean @default(false)

  canCreateProject           Boolean @default(false)
  canModifyOwnProject        Boolean @default(false)
  canModifyOtherProject      Boolean @default(false)
  canDeleteOwnProject        Boolean @default(false)
  canDeleteOtherProject      Boolean @default(false)
  canAddProjectToCircle      Boolean @default(false)
  canRemoveProjectFromCircle Boolean @default(false)
  canAddUserToProject        Boolean @default(false)

  canManageRoles Boolean @default(false)
  canManageUsers Boolean @default(false)

  canCreateProjectReviews    Boolean @default(false)
  canModifyOwnProjectReviews Boolean @default(false)
  canDeleteOwnProjectReviews Boolean @default(false)
  canManageProjectReviews    Boolean @default(false)

  isAdmin Boolean @default(false)

  users User[]
}

enum School {
  ENGINEERING
}

enum Track {
  FRONTEND
  BACKEND
  CLOUD
}

model User {
  id              String          @id @default(uuid())
  google_id       String?         @unique
  github_id       String?         @unique
  password        String?
  first_name      String
  last_name       String?
  email           String          @unique
  profile_picture String?
  otp             String?
  last_login      DateTime?
  role            Role            @relation(fields: [role_id], references: [id])
  role_id         String
  track           Track?
  school          School          @default(ENGINEERING)
  circle          Circle?         @relation(fields: [circleId], references: [id], name: "members")
  circleId        Int?
  projects        Project[]
  collab_projects Project[]       @relation(name: "Collaborators")
  project_ratings ProjectRating[]
  project_reviews ProjectReview[]
  notifications   Notification[]
  created_at      DateTime        @default(now())
}

model Session {
  sid    String   @id @unique
  sess   Json
  expire DateTime
}

enum circleVisibility {
  PUBLIC
  PRIVATE
}

model ProjectRating {
  rating     Int     @default(0)
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  project    Project @relation(fields: [project_id], references: [id])
  project_id String

  @@id([user_id, project_id])
}

model ProjectReview {
  id         String   @unique @default(uuid())
  review     String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  project    Project  @relation(fields: [project_id], references: [id])
  project_id String
  created_at DateTime @default(now())
}

model Project {
  id            String          @id @unique @default(uuid())
  name          String
  description   String
  github_url    String?
  live_url      String?
  tags          String[]
  pictures      String[]
  created_by    User            @relation(fields: [user_id], references: [id])
  user_id       String
  pinned        Boolean         @default(false)
  rating        ProjectRating[]
  reviews       ProjectReview[]
  collaborators User[]          @relation(name: "Collaborators")
  circle_id     Int?
  circle        Circle?         @relation(fields: [circle_id], references: [id])
  created_at    DateTime        @default(now())
}

model Circle {
  id          Int       @id @unique
  members     User[]    @relation(name: "members")
  projects    Project[]
  description String
  rating      Float     @default(0.0)
  created_at  DateTime  @default(now())
}

model Search {
  id     String @id @default(uuid())
  search String @unique
  count  Int    @default(0)
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  is_read    Boolean  @default(false)
  url        String?
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
}
